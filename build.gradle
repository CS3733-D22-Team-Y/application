plugins {
    id 'application'
    id 'java'
    id 'jacoco'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
    id "io.freefair.lombok" version "5.0.0-rc6"
    id 'org.openjfx.javafxplugin' version '0.0.10'
}
mainClassName = 'edu.wpi.cs3733.d22.teamY.Main'

repositories {
    mavenCentral()
    jcenter()
    maven {
        url 'https://apisite.crmyers.dev/maven'
    }
}

javafx {
    version = "17"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.media']
}


dependencies {
    implementation(
            'com.jfoenix:jfoenix:9.0.10',

            // You may comment out the database dependency you do not use
            'org.xerial:sqlite-jdbc:3.30.1',
            'org.apache.derby:derby:10.15.2.0',
            //Derby Requirements
            [group: 'org.apache.derby', name: 'derby', version: '10.15.2.0'],
            [group: 'org.apache.derby', name: 'derbytools', version: '10.15.2.0'],
            [group: 'org.apache.derby', name: 'derbyclient', version: '10.15.2.0'],
            'org.slf4j:slf4j-api:1.7.30',
            'org.slf4j:slf4j-simple:1.7.30',


            //

    )

    testCompile(
            "org.testfx:testfx-core:4.0.16-alpha",
            "junit:junit:4.13.2",
            "org.testfx:testfx-junit:4.0.16-alpha"
    )

    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

    implementation 'org.hibernate:hibernate-core:5.6.7.Final'


    implementation 'org.springframework:spring-jdbc:5.3.17'

    implementation 'org.apache.derby:derbytools:10.15.2.0'
    implementation 'org.hibernate:hibernate-entitymanager:5.6.7.Final'

    implementation 'org.apache.logging.log4j:log4j-core:2.3.2'
    implementation 'io.github.palexdev:materialfx:11.13.4'

    implementation 'com.twilio.sdk:twilio:8.28.0'

    implementation 'com.sun.mail:jakarta.mail:1.6.7'
    compile "org.apache.commons:commons-lang3:3.3.2"

}


test {
    useJUnit()
}

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

def codeCoverageExcludes = [
        'edu.wpi.teamname.App',
        'edu.wpi.teamname.Main',
]

jacoco {
    toolVersion = "0.8.4"
}

/*
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }

        rule {
            element = 'CLASS'
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.25
            }
            excludes = codeCoverageExcludes
        }
    }
}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification.dependsOn jacocoTestReport

 */
compileJava.dependsOn 'spotlessApply'

spotless {
    java {
        googleJavaFormat()
        indentWithSpaces(2)
    }
}

run {
    standardInput = System.in
}